import java.io.PrintStream;

aspect PrettyPrint {
	public void ASTNode.prettyPrint(PrintStream out) {
		prettyPrint(out, "");
		out.println();
	}

	public void ASTNode.prettyPrint(PrintStream out, String ind) {
	  for (ASTNode child : astChildren()) {
		  child.prettyPrint(out, ind);
	    }
	}

	public void Numeral.prettyPrint(PrintStream out, String ind) {
		out.print(getNUMERAL());
	}

	public void IdUse.prettyPrint(PrintStream out, String ind) {
		out.print(getID());
	}

	public void IdDecl.prettyPrint(PrintStream out, String ind) {
		out.print(getID());
	}

	public void Param.prettyPrint(PrintStream out, String ind) {	
		out.print("int ");
		getIdDecl().prettyPrint(out, ind);
	}

    public void Return.prettyPrint(PrintStream out, String ind) {
		out.print(ind + "return ");
        getExpr().prettyPrint(out, ind);
        out.print(";");
	}

	public void Function.prettyPrint(PrintStream out, String ind) {	
		out.print("int ");
		getIdDecl().prettyPrint(out, ind);
		out.print("(");
		if (hasParamList()) {
			int curr = 0;
			ParamList paramList = getParamList();
			int size = paramList.getNumParam();
			for (int i = 0; i < size; i++) {
				Param p = paramList.getParam(i);
				p.prettyPrint(out, ind);
				if (curr < size) {
					out.print(", ");
				}
				curr += 1;
			}
		}
		out.print(") {");
		out.println();

		if (hasStmt()){
			for(int i = 0; i < getNumStmt(); i++){
        	    getStmt(i).prettyPrint(out, ind);
				out.println();
			}
		}
		else {
			out.println();
		}
		out.println("}");
	}

    public void While.prettyPrint(PrintStream out, String ind) {
		out.print(ind + "while (");
        getExpr().prettyPrint(out, ind);
        out.print(") {");
        out.println();

        if (hasStmt()){
			for(int i = 0; i < getNumStmt(); i++){
        	    getStmt(i).prettyPrint(out, ind);
				out.println();
			}
		}
		else {
			out.println();
		}
        out.println("}");
	}

    public void IfElse.prettyPrint(PrintStream out, String ind) {
		out.print(ind + "if (");
        getExpr().prettyPrint(out, ind);
        out.println(") {");

		if (hasStmt()){
			for(int i = 0; i < getNumStmt(); i++){
        	    getStmt(i).prettyPrint(out, ind);
				out.println();
			}
		}
		else{
			out.println();
		}
        out.println("}");

        out.println("else {");
        out.println();

		StmtBlock elseBlock = getElseBlock();
		if (hasElseBlock()) {
			int size = elseBlock.getNumStmt();
			for (int i = 0; i < size; i++) {
				Stmt s = elseBlock.getStmt(i);
				out.print(ind+"  ");
				s.prettyPrint(out, ind);
				out.println();
			}  
		}
        out.println("}");
	}

	public void DeclareVar.prettyPrint(PrintStream out, String ind) {
		out.print(ind + "int ");
        getIdDecl().prettyPrint(out, ind);
 
        if (hasExpr()) {
            out.print(" = ");
			getExpr().prettyPrint(out, ind);
        }    
		out.print(";");    
	}

    public void AssignVar.prettyPrint(PrintStream out, String ind) {
		out.print(ind);
        getIdUse().prettyPrint(out, ind);
        out.print(" = ");
        getExpr().prettyPrint(out, ind);
        out.print(";");
	}

    public void FunctionCall.prettyPrint(PrintStream out, String ind) {
        getIdUse().prettyPrint(out, ind);
        out.print("(");

		// TODO: check if this is correct
        if (hasExpr()){
            getExpr().prettyPrint(out, ind);
        }

        out.print(")");
	}

    public void FunctionCallStmt.prettyPrint(PrintStream out, String ind) {
        getFunctionCall().prettyPrint(out, ind);
        out.print(";");
	}

	public void Mul.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" * ");
		getRight().prettyPrint(out, ind);
	}

	public void Div.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" / ");
		getRight().prettyPrint(out, ind);
	}

    public void Add.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" + ");
		getRight().prettyPrint(out, ind);
	}

	public void Sub.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" - ");
		getRight().prettyPrint(out, ind);
	}

    public void Mod.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" % ");
		getRight().prettyPrint(out, ind);
	}

    public void Not.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" != ");
		getRight().prettyPrint(out, ind);
	}

    public void Equal.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" == ");
		getRight().prettyPrint(out, ind);
	}

    public void Greater.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" > ");
		getRight().prettyPrint(out, ind);
	}

    public void Less.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" < ");
		getRight().prettyPrint(out, ind);
	}

    public void GreaterEqual.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" >= ");
		getRight().prettyPrint(out, ind);
	}

    public void LessEqual.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" <= ");
		getRight().prettyPrint(out, ind);
	}
}
