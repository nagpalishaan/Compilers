aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Function node, Object data);
		public Object visit(Param node, Object data);
		public Object visit(Return node, Object data);
		public Object visit(While node, Object data);
		public Object visit(IfElse node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Neg node, Object data);
		public Object visit(Not node, Object data);
		public Object visit(Equal node, Object data);
		public Object visit(Greater node, Object data);
		public Object visit(Less node, Object data);
		public Object visit(GreaterEqual node, Object data);
		public Object visit(LessEqual node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(DeclareVar node, Object data);
		public Object visit(AssignVar node, Object data);
		public Object visit(FunctionCall node, Object data);
		public Object visit(FunctionCallStmt node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Function.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Param.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Return.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object While.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfElse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Neg.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Not.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Equal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Greater.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Less.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LessEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object DeclareVar.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object AssignVar.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionCallStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
