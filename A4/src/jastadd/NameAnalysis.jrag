aspect NameAnalysis {
	syn IdDecl IdUse.decl() = lookup(getID());
	inh IdDecl IdUse.lookup(String name);

    eq Program.getChild().lookup(String name) = unknownDecl();    
    inh IdDecl Function.lookup(String name);

    // change from getStmt() to ??
    eq Function.getStmt().lookup(String name){
        IdDecl decl = localLookup(name);
		return !decl.isUnknown() ? decl : lookup(name);
    }

    syn IdDecl Function.localLookup(String name){
        for (Param p : getParamList()) {
            if (p.getIdDecl().getID().equals(name)) {
                return p.getIdDecl();
            }
        }

        for (Param p : getStmts()) {
            if (s.getIdDecl().getID().equals(name)) {
                return s.getIdDecl();
            }
        }
        return unknownDecl();
    }

    eq Function.getParam(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
		return !decl.isUnknown() ? decl : lookup(name);
    }

    // Change from function to work with all statement blocks
    eq Function.getStmt(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
		return !decl.isUnknown() ? decl : lookup(name);
    }

    eq StmtBlock.getStmt(int index).lookup(String name) {
        IdDecl decl = localLookup(name, index);
		return !decl.isUnknown() ? decl : lookup(name);
    }

    inh IdDecl IdDecl.lookup(String name);
	syn boolean IdDecl.isMultiDeclared() = lookup(getID()) != this;

}

aspect CircularDefinitions {
	/* Identify circular definitions in functions */
	syn boolean IdUse.isCircular() = inExprOf(decl());
	inh boolean IdUse.inExprOf(IdDecl decl);

    // TODO

    eq Program.getChild().inExprOf(IdDecl decl) = false;
}