import java.util.Set;
import java.util.TreeSet;

aspect FunctionCallGraph {

    // Collection attribute
    coll Set<Function> Function.functionCalls() [new TreeSet<Function>()] with add root Function;

    // Inherited attribute enclosingFunction
    inh Function Stmt.enclosingFunction();
    inh Function FunctionCall.enclosingFunction();

    eq Function.getStmtBlock().enclosingFunction() = this;

    // Fix function comparable compile error
    public class Function implements Comparable<Function> {
        public int compareTo(Function f) {
            return getIdDecl().getID().compareTo(f.getIdDecl().getID());
        }
    }
}

aspect FunctionCallContributions {
    FunctionCall contributes getIdUse().decl().function()
		to Function.functionCalls()
        for enclosingFunction();
}

aspect Reachability {
    syn Set<Function> Function.reachable() circular [new TreeSet<Function>()];
    eq Function.reachable() {
        Set<Function> reachableFuncs = new TreeSet<Function>();
        for (Function f : functionCalls()) {
            reachableFuncs.add(f);
            reachableFuncs.addAll(f.reachable());
        }
        return reachableFuncs;
    }
}