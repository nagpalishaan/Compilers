%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, INT, LPARANTH, RPARANTH, LCURLY, RCURLY, NUMERAL, ASSIGN, SEMICOLON;
%terminals MUL, ADD, DIV, SUB, MOD, LT, LTE, GT, GTE, NOT, EQUAL, IF, ELSE, WHILE, RETURN, COMMA;

%typeof program = "Program";
%typeof id_decl = "IdDecl";
%typeof function = "Function";
%typeof numeral = "Numeral";
%typeof functionDecls = "List";
%typeof exp = "Expr";
%typeof expList = "List";
%typeof factor = "Expr";
%typeof term = "Expr";
%typeof statement = "Stmt";
%typeof statementList = "List";
%typeof id_use = "IdUse";
%typeof assign = "AssignVar";
%typeof declare = "DeclareVar";
%typeof paramList = "List";
%typeof param = "Param";


%goal program;

program = functionDecls.a {: return new Program(a); :} ;

function = 
	INT id_decl.a LPARANTH RPARANTH LCURLY statementList.c RCURLY {: return new Function(a, new Opt(), new Opt(c)); :} 
	| INT id_decl.a LPARANTH RPARANTH LCURLY RCURLY {: return new Function(a, new Opt(), new Opt()); :} 
  | INT id_decl.a LPARANTH paramList.b RPARANTH LCURLY statementList.c RCURLY {: return new Function(a, new Opt(b), new Opt(c)); :} 
	| INT id_decl.a LPARANTH paramList.b RPARANTH LCURLY RCURLY {: return new Function(a, new Opt(b), new Opt()); :} 
	;

functionDecls =
    function.a {: return new List().add(a); :}
    | functionDecls.a function.b {: return a.add(b); :} 
	;

paramList =
    param.a {: return new List().add(a); :}
    | paramList.a COMMA param.b {: return a.add(b); :}
    ;

param =
    INT id_decl.a {: return new Param(a); :}
    ;

exp =
  factor
  | add_expr
  | comparison_expr
  ;

add_expr =
  exp.a ADD factor.b {: return new Add(a, b); :}
  | exp.a SUB factor.b {: return new Sub(a, b); :}
  ;

comparison_expr =
  exp.a LT factor.b {: return new Less(a, b); :}
  | exp.a LTE factor.b {: return new LessEqual(a, b); :}
  | exp.a GT factor.b {: return new Greater(a, b); :}
  | exp.a GTE factor.b {: return new GreaterEqual(a, b); :}
  | exp.a NOT factor.b {: return new Not(a, b); :}
  | exp.a EQUAL factor.b {: return new Equal(a, b); :}
  ;

factor =
  term
  | factor.a MUL term.b {: return new Mul(a, b); :}
  | factor.a DIV term.b {: return new Div(a, b); :}
  | factor.a MOD term.b {: return new Mod(a, b); :}
  ;

term =
  numeral
  | id_use
  | LPARANTH exp.a RPARANTH {: return a; :}
  ;



expList = 
	exp.a {: return new List().add(a); :}
    | expList.a exp.b {: return a.add(b); :} 
	;

statement = 
	id_decl.a ASSIGN exp.b SEMICOLON {: return new AssignVar(a, b); :} 
	| INT id_decl.a SEMICOLON {: return new DeclareVar(a, new Opt()); :} 
	| INT id_decl.a ASSIGN expList.b SEMICOLON {: return new DeclareVar(a, new Opt(b)); :}
	| IF LPARANTH exp.a RPARANTH LCURLY statementList.b RCURLY {: return new IfElse(a, b, new Opt()); :}
	| IF LPARANTH exp.a RPARANTH LCURLY statementList.b RCURLY ELSE LCURLY statementList.c RCURLY {: return new IfElse(a, b, new Opt(c)); :}
	| WHILE LPARANTH exp.a RPARANTH LCURLY statementList.b RCURLY {: return new While(a, b); :}
	| RETURN exp.a SEMICOLON {: return new Return(a); :}
	;

statementList = 
	statement.a {: return new List().add(a); :}
    | statementList.a statement.b {: return a.add(b); :} 
	;

numeral = NUMERAL.num {: return new Numeral(num); :} ;

id_decl = ID.id {: return new IdDecl(id); :} ;

id_use = ID.id {: return new IdUse(id); :} ;