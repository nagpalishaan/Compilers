%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, INT, LPARANTH, RPARANTH, LCURLY, RCURLY, NUMERAL, ASSIGN, SEMICOLON;

%typeof program = "Program";
%typeof id_decl = "IdDecl";
%typeof function = "Function";
%typeof numeral = "Numeral";
%typeof functionDecls = "List";
%typeof exp = "Expr";
%typeof factor = "Expr";
%typeof statement = "Stmt";
%typeof statementList = "List";
%typeof id_use = "IdUse";
%typeof assign = "AssignVar";
%typeof declare = "DeclareVar";

%goal program;

program = functionDecls.a {: return new Program(a); :} ;

function = INT id_decl.a LPARANTH RPARANTH LCURLY statementList.b RCURLY {: return new Function(a, b); :} ;

functionDecls =
    function.a {: return new List().add(a); :}
    | functionDecls.a function.b {: return a.add(b); :} 
	;

exp = factor;

factor = 
	numeral
	| id_use
	;

statement = 
	id_decl.a ASSIGN exp.b SEMICOLON {: return new AssignVar(a, b); :} 
	| INT id_decl.a SEMICOLON {: return new DeclareVar(a); :} 
	;

statementList = 
	statement.a {: return new List().add(a); :}
    | statementList.a statement.b {: return a.add(b); :} 
	| {: return new List(); :} 
	;

numeral = NUMERAL.num {: return new Numeral(num); :} ;

id_decl = ID.id {: return new IdDecl(id); :} ;

id_use = ID.id {: return new IdUse(id); :} ;